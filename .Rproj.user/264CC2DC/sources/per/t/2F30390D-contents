// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// C_box_muller
arma::colvec C_box_muller(int& mu, int& q);
RcppExport SEXP _GaussianSampling_C_box_muller(SEXP muSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< int& >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(C_box_muller(mu, q));
    return rcpp_result_gen;
END_RCPP
}
// C_GSdiag
arma::colvec C_GSdiag(arma::vec& mu, arma::mat& Q);
RcppExport SEXP _GaussianSampling_C_GSdiag(SEXP muSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(C_GSdiag(mu, Q));
    return rcpp_result_gen;
END_RCPP
}
// C_GSband
arma::colvec C_GSband(arma::vec& mu, arma::mat& Q, int& b);
RcppExport SEXP _GaussianSampling_C_GSband(SEXP muSEXP, SEXP QSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(C_GSband(mu, Q, b));
    return rcpp_result_gen;
END_RCPP
}
// C_GScirc
arma::colvec C_GScirc(arma::vec& mu, arma::mat& a, int& N, int& M);
RcppExport SEXP _GaussianSampling_C_GScirc(SEXP muSEXP, SEXP aSEXP, SEXP NSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< int& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(C_GScirc(mu, a, N, M));
    return rcpp_result_gen;
END_RCPP
}
// C_GSchol
arma::colvec C_GSchol(arma::vec& mu, arma::mat& Q);
RcppExport SEXP _GaussianSampling_C_GSchol(SEXP muSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(C_GSchol(mu, Q));
    return rcpp_result_gen;
END_RCPP
}
// C_GSsqrt
arma::colvec C_GSsqrt(arma::vec& mu, arma::mat& Q);
RcppExport SEXP _GaussianSampling_C_GSsqrt(SEXP muSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(C_GSsqrt(mu, Q));
    return rcpp_result_gen;
END_RCPP
}
// C_GScheby
arma::colvec C_GScheby(arma::vec& mu, arma::mat& Q, float& K);
RcppExport SEXP _GaussianSampling_C_GScheby(SEXP muSEXP, SEXP QSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< float& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(C_GScheby(mu, Q, K));
    return rcpp_result_gen;
END_RCPP
}
// C_GSlanczos
arma::colvec C_GSlanczos(arma::vec& mu, arma::mat& Q, double& K);
RcppExport SEXP _GaussianSampling_C_GSlanczos(SEXP muSEXP, SEXP QSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< double& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(C_GSlanczos(mu, Q, K));
    return rcpp_result_gen;
END_RCPP
}
// C_GSCG
arma::colvec C_GSCG(arma::vec& mu, arma::mat& Q, double& epsilon, arma::vec& omega0);
RcppExport SEXP _GaussianSampling_C_GSCG(SEXP muSEXP, SEXP QSEXP, SEXP epsilonSEXP, SEXP omega0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< double& >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type omega0(omega0SEXP);
    rcpp_result_gen = Rcpp::wrap(C_GSCG(mu, Q, epsilon, omega0));
    return rcpp_result_gen;
END_RCPP
}
// C_GSgibbs
arma::colvec C_GSgibbs(arma::vec& mu, arma::mat& Q, int& total_itr, arma::vec& theta0);
RcppExport SEXP _GaussianSampling_C_GSgibbs(SEXP muSEXP, SEXP QSEXP, SEXP total_itrSEXP, SEXP theta0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int& >::type total_itr(total_itrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta0(theta0SEXP);
    rcpp_result_gen = Rcpp::wrap(C_GSgibbs(mu, Q, total_itr, theta0));
    return rcpp_result_gen;
END_RCPP
}
// C_GSMS
arma::colvec C_GSMS(arma::vec& mu, arma::mat& Q, int& total_itr, arma::vec& theta0, std::string& method);
RcppExport SEXP _GaussianSampling_C_GSMS(SEXP muSEXP, SEXP QSEXP, SEXP total_itrSEXP, SEXP theta0SEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int& >::type total_itr(total_itrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< std::string& >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(C_GSMS(mu, Q, total_itr, theta0, method));
    return rcpp_result_gen;
END_RCPP
}
// C_GSMS_ssor
arma::colvec C_GSMS_ssor(arma::vec& mu, arma::mat& Q, int& total_itr, arma::vec& theta0);
RcppExport SEXP _GaussianSampling_C_GSMS_ssor(SEXP muSEXP, SEXP QSEXP, SEXP total_itrSEXP, SEXP theta0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int& >::type total_itr(total_itrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta0(theta0SEXP);
    rcpp_result_gen = Rcpp::wrap(C_GSMS_ssor(mu, Q, total_itr, theta0));
    return rcpp_result_gen;
END_RCPP
}
// C_GSAMS
arma::colvec C_GSAMS(arma::vec& mu, arma::mat& Q, int& total_itr, arma::vec& theta0, double& omega, std::string& method);
RcppExport SEXP _GaussianSampling_C_GSAMS(SEXP muSEXP, SEXP QSEXP, SEXP total_itrSEXP, SEXP theta0SEXP, SEXP omegaSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int& >::type total_itr(total_itrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< double& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< std::string& >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(C_GSAMS(mu, Q, total_itr, theta0, omega, method));
    return rcpp_result_gen;
END_RCPP
}
// C_GSDA
arma::colvec C_GSDA(arma::vec& mu, arma::mat& Q1, arma::mat& G1, arma::mat& Lambda1, int& total_itr, arma::vec& theta0, std::string& method, double& omega);
RcppExport SEXP _GaussianSampling_C_GSDA(SEXP muSEXP, SEXP Q1SEXP, SEXP G1SEXP, SEXP Lambda1SEXP, SEXP total_itrSEXP, SEXP theta0SEXP, SEXP methodSEXP, SEXP omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Q1(Q1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type G1(G1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Lambda1(Lambda1SEXP);
    Rcpp::traits::input_parameter< int& >::type total_itr(total_itrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double& >::type omega(omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(C_GSDA(mu, Q1, G1, Lambda1, total_itr, theta0, method, omega));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GaussianSampling_C_box_muller", (DL_FUNC) &_GaussianSampling_C_box_muller, 2},
    {"_GaussianSampling_C_GSdiag", (DL_FUNC) &_GaussianSampling_C_GSdiag, 2},
    {"_GaussianSampling_C_GSband", (DL_FUNC) &_GaussianSampling_C_GSband, 3},
    {"_GaussianSampling_C_GScirc", (DL_FUNC) &_GaussianSampling_C_GScirc, 4},
    {"_GaussianSampling_C_GSchol", (DL_FUNC) &_GaussianSampling_C_GSchol, 2},
    {"_GaussianSampling_C_GSsqrt", (DL_FUNC) &_GaussianSampling_C_GSsqrt, 2},
    {"_GaussianSampling_C_GScheby", (DL_FUNC) &_GaussianSampling_C_GScheby, 3},
    {"_GaussianSampling_C_GSlanczos", (DL_FUNC) &_GaussianSampling_C_GSlanczos, 3},
    {"_GaussianSampling_C_GSCG", (DL_FUNC) &_GaussianSampling_C_GSCG, 4},
    {"_GaussianSampling_C_GSgibbs", (DL_FUNC) &_GaussianSampling_C_GSgibbs, 4},
    {"_GaussianSampling_C_GSMS", (DL_FUNC) &_GaussianSampling_C_GSMS, 5},
    {"_GaussianSampling_C_GSMS_ssor", (DL_FUNC) &_GaussianSampling_C_GSMS_ssor, 4},
    {"_GaussianSampling_C_GSAMS", (DL_FUNC) &_GaussianSampling_C_GSAMS, 6},
    {"_GaussianSampling_C_GSDA", (DL_FUNC) &_GaussianSampling_C_GSDA, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_GaussianSampling(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
